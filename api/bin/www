#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('api:server');
const http = require('http');

//Import the mongoose module
const mongoose = require('mongoose');

const animationSchema = new mongoose.Schema({
    name: String,
    gifAdrress: String,
    description: String
});

const Animation = mongoose.model('animations', animationSchema);

/**
 * Get port from environment and store in Express.
 */

const port = process.env.PORT || 8080;
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

app.get('/animations', (req, res) => {
    console.log('Ide jaki flex');
    Animation.find({}, (err, docs) => {
        if (err) {
            res.json(err);
        } else {
            res.json(docs);
        }
    });
});

const connect = () => {
    return mongoose.connect('mongodb://localhost:27017/animationsdb', { useNewUrlParser: true, useUnifiedTopology: true });
}

connect()
    /*.then(async connection => {
        const newAnimation = new Animation({
            name: 'Neka animacija',
            gifAdrress: 'slika.jpg',
            description: 'Ide gas'
        });

        // Save the new model instance, passing a callback
        newAnimation.save(err => {
            if (err) return handleError(err);
            // saved!
        });
    })
    .catch(e => console.error(e));*/

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}